extends layout

block title 
  title Image

block content
  h1 Image Details

  if image
    h2= image.filename
    img(src=`data:image/jpeg;base64,${image.image.toString('base64')}`, alt=image.filename, width="300")
    if image.tags && image.tags.length > 0
      h3 Tags:
      ul
        each tag in image.tags
          li= tag.name
    else
      p No tags associated with this image.
    
    div.button-container
      button(onclick=`editImage(${image.id}, "${image.filename}")`) Edit
      button(onclick=`deleteImage("${image.id}")`) Delete

  else
    p No image found.

  script.
    async function editImage(id, filename) {
      const token = getCookie('token');
      try {
        const response = await fetch(`/image/update/${id}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          }
        });
        console.log(response);
        if (response.ok) {
          window.location.href = `/image/update/${id}`;
        } else {
          alert('Failed to edit the image.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while editing the image.');
      }
    }

    async function deleteImage(id) {
      if (confirm('Are you sure you want to delete this image?')) {
        const token = getCookie('token');
        try {
          const response = await fetch(`/image/${id}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            }
          });
          if (response.ok) {
            window.location.href = '/image/images_list';
          } else {
            alert('Failed to delete the image.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while deleting the image.');
        }
      }
    }

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
      return null;
    }
