extends layout

block title 
  title Image List

block content
  h1 Image List

  ul
    each image in images
        li
          h3
            a(href="#", onclick=`viewImage("${image.filename}")`)= image.filename
          img(src=`data:image/jpeg;base64,${image.image.toString('base64')}`, alt=image.filename, width="200", onclick=`viewImage("${image.filename}")`, style="cursor: pointer;")
          button(onclick=`editImage(${image.id}, "${image.filename}")`) Edit

    script.
      async function editImage(id, filename) {
        const token = getCookie('token');

        try {
          const response = await fetch(`/image/edit?id=${id}&filename=${encodeURIComponent(filename)}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            }
          });

          if (response.ok) {
            window.location.href = `/image/edit?id=${id}&filename=${encodeURIComponent(filename)}`;
          } else {
            alert('Failed to edit the image.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while editing the image.');
        }
      }

      async function viewImage(filename) {
        const token = getCookie('token');

        try {
          const response = await fetch(`/image/${filename}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            }
          });

          if (response.ok) {
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);
            window.location.href = url;
          } else {
            alert('Failed to view the image.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while viewing the image.');
        }
      }

      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
      }
