extends layout

block title 
  title Image List

block content
  div(class="container is-max-desktop")
    h1(class="title is-3") Image List

    a(href="/image/upload" class="button is-primary is-rounded") Upload

    form(action="/image/search" method="GET" class="field is-grouped mt-6 mb-6")
      p(class="control is-expanded")
        input(type="text" id="search" name="search" placeholder="Search images by name" 
          class="input is-medium" oninput="debounceSearch()")
      p(class="control")
        button(type="button" onClick="runSearch()" class="button is-primary is-medium") Search

    div(class="columns is-multiline is-centered")
      each image in data.images
        div(class="column is-half")
          div(class="card my-4")
            div(class="card-image")
              figure(class="image")
                img(src=`data:image/jpeg;base64,${image.image.toString('base64')}`, alt=image.filename, class="is-clickable" onclick=`viewImage("${image.id}")`)
            div(class="card-content")
              div(class="media")
                div(class="media-content")
                  h3(class="title is-5")
                    a(href="#", onclick=`viewImage("${image.id}")` class="has-text-primary")= image.filename

    nav(class="pagination is-centered" role="navigation" aria-label="pagination")
      if data.currentPage > 1
        a(class="pagination-previous", href=`/image/images_list?page=${data.currentPage - 1}`) Previous

      if data.currentPage < data.totalPages
        a(class="pagination-next", href=`/image/images_list?page=${data.currentPage + 1}`) Next

      ul(class="pagination-list")
        each page in [...Array(data.totalPages).keys()].map(i => i + 1)
          li
            if page === data.currentPage
              a(class="pagination-link is-current", aria-label=`Page ${page}`, aria-current="page")= page
            else
              a(class="pagination-link", href=`/image/images_list?page=${page}`, aria-label=`Goto page ${page}`)= page

  script.
    async function viewImage(id) {
      const token = getCookie('token');

      try {
        const response = await fetch(`/image/${id}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          }
        });
        if (response.ok) {
          window.location.href = `/image/${id}`;
        } else {
          alert('Failed to view the image.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while viewing the image.');
      }
    }

    let debounceTimer;
    function debounceSearch() {
      clearTimeout(debounceTimer);  // Clear the previous timer
      debounceTimer = setTimeout(runSearch, 300);  // Set a new timer (e.g., 300ms)
    }

    async function runSearch() {
      const searchQuery = document.getElementById('search').value;

      if (searchQuery.length < 2) {
        return;  // Do nothing if the search query has fewer than 2 characters
      }

      const token = getCookie('token');
      const response = await fetch(`/image/images_list?searchQuery=${encodeURIComponent(searchQuery)}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        window.location.href = `/image/images_list?searchQuery=${encodeURIComponent(searchQuery)}`;
      } else {
        alert('Failed to search images.');
      }
    }

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return parts.pop().split(';').shift();
      return null;
    }

  style.
    .container.is-max-desktop {
      width: 50vw;
      margin: 0 auto;
    }
